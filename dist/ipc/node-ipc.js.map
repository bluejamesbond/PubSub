{"version":3,"sources":["../../src/ipc/node-ipc.es6"],"names":[],"mappings":"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","file":"node-ipc.es6","sourcesContent":["import ipc from 'node-ipc';\nimport IPC from '../ipc.es6';\nimport crypto from 'crypto';\n\n// TODO: Add groups via key\n\nconst noop = () => 0;\nconst defaultOpts = {\n  debug: true,\n  appspace: '',\n  allowPeerEmit: true, // true: slaves can message a specific slave by origin\n  allowPeerBroadcast: true, // true: slaves can talk amongst themselves\n  allowSlaveEmit: true, // true: slaves can talk to master\n  allowAllConnections: true // false: set acceptable connections via accept, disconnect\n};\n\nclass NodeIPC extends IPC {\n  constructor(id, opts = {}) {\n    opts = Object.assign(defaultOpts, opts);\n\n    super(opts.debug);\n\n    this.remote = opts.remote;\n    this.accepted = new Map();\n    this.connections = new Map();\n    this.opts = opts;\n\n    ipc.config.id = opts.id || 'socket';\n    ipc.config.retry = 5;\n    ipc.config.maxRetries = 20;\n    ipc.config.networkHost = this.remote ? '0.0.0.0' : '127.0.0.1';\n    ipc.config.maxConnections = 10;\n    ipc.config.appspace = id || opts.appspace;\n    ipc.config.silent = !this.debug;\n  }\n\n  Slave = {\n    volatile: this._slaveVolatile.bind(this),\n    emit: this._slaveEmit.bind(this),\n    broadcast: this._slaveBroadcast.bind(this),\n    on: this._slaveOn.bind(this),\n    once: this._slaveOnce.bind(this),\n    accept: this._slaveAccept.bind(this),\n    reject: this._slaveReject.bind(this),\n    disconnect: this._slaveDisconnect.bind(this),\n    removeListener: this._slaveRemoveListener.bind(this)\n  };\n\n  _slaveAccept(origin) {\n    this.accepted.set(origin, true);\n  }\n\n  _slaveReject(origin) {\n    this.accepted.delete(origin);\n    this._slaveDisconnect(origin);\n  }\n\n  _slaveDisconnect(origin) {\n    const socket = this.connections.get(origin);\n\n    NodeIPC.terminate(socket);\n  }\n\n  static terminate(socket) {\n    if (socket) {\n      try {\n        socket.__destroyed = true;\n        socket.destroy();\n      } catch (e) {\n        // ignore\n      }\n    }\n  }\n\n  _slaveOn(channel, ...args) {\n    return this.on(`slave-emit-${channel}`, ...args);\n  }\n\n  _slaveOnce(channel, ...args) {\n    return this.on(`slave-emit-${channel}`, ...args);\n  }\n\n  _slaveRemoveListener(channel, ...args) {\n    return this.removeListener(`slave-emit-${channel}`, ...args);\n  }\n\n  _slaveVolatile(dest, channel, data) {\n    this._slaveEmit(dest, channel, data, false);\n  }\n\n  _slaveEmit(dest, channel, data, awk = true) {\n    if (!awk) {\n      return this._handleTransmit({dest, action: 'master-message', channel, data, awk}, noop);\n    }\n\n    return new Promise((resolve, reject) => {\n      this._handleTransmit({dest, action: 'master-message', channel, data, resolve, reject, awk}, noop);\n    });\n  }\n\n  _slaveBroadcast(channel, data, except = []) {\n    return this._handleTransmit({action: 'master-broadcast', channel, data, except}, noop);\n  }\n\n  _handleTransmit({dest, channel, data, resolve, action, reject, awk, except = []}, callback) {\n    const eventId = this._generateUUID();\n\n    if (action === 'master-broadcast') {\n      this.broadcast('master-message', {id: eventId, channel, data}, ...except);\n      return callback();\n    }\n\n    let tid;\n    let event;\n\n    const accepted = res => {\n      clearTimeout(tid);\n      resolve(res.data);\n    };\n\n    const timeout = () => {\n      this.removeListener(event, accepted);\n      reject({dest, channel, data, awk});\n    };\n\n    let awkChan;\n\n    // if its not a master-broadcast\n    if (action === 'master-message') {\n      awkChan = 'master-awk';\n    }\n\n    if (awk) {\n      const wait = typeof awk === 'number' && awk > 0 ? awk : this.resDefaultTimeout;\n\n      this.once(`${awkChan}-${eventId}`, accepted);\n      tid = setTimeout(timeout, wait);\n    }\n\n    const req = {\n      id: this.origin,\n      data: {id: eventId, channel, data}\n    };\n\n    this.emit(dest, action, req);\n\n    callback();\n  }\n\n  _generateUUID() {\n    return crypto.randomBytes(10).toString('hex');\n  }\n\n  listen(port, cb = () => 0) {\n    ipc.config.networkPort = port;\n\n    ipc[this.remote ? 'serveNet' : 'serve'](() => {\n      ipc.config.stopRetrying = true; // TODO test corner cases\n\n      ipc.server.on('authorize', (req, socket) => {\n        const origin = socket.id;\n\n        if (!this.opts.allowAllConnections) {\n          if (!this.accepted.has(origin)) {\n            this.log('Force disconnection', origin);\n            return NodeIPC.terminate(socket);\n          }\n        }\n\n        const updateSocket = () => {\n          this.connections.set(origin, socket);\n\n          this.emit(origin, 'authorized');\n          this._emit(`slave-emit-connect`, origin);\n          this._emit(`slave-emit-connect-${origin}`, origin);\n        };\n\n        if (this.connections.has(origin)) {\n          const prevSocket = this.connections.get(origin);\n\n          if (prevSocket && prevSocket.writable) {\n            let tid;\n            const event = `is-alive-${origin}`;\n\n            const prevAlive = () => {\n              clearTimeout(tid);\n              this.log('Force disconnection; new connection', origin);\n              return NodeIPC.terminate(socket);\n            };\n\n            const prevDead = () => {\n              this.removeListener(event, prevAlive);\n              this.log('Terminating previous connection due to no response', origin);\n              NodeIPC.terminate(prevSocket);\n              updateSocket();\n            };\n\n            this.once(event, prevAlive);\n\n            tid = setTimeout(prevDead, 2000);\n\n            try {\n              return this.emit(origin, 'slave-alive');\n            } catch (e) {\n              // continue to terminate the previous\n            }\n          }\n\n          this.log('Terminating previous connection', origin);\n          NodeIPC.terminate(prevSocket);\n        }\n\n        updateSocket();\n      });\n\n      ipc.server.on('is-alive', (req, socket) => {\n        const origin = socket.id;\n\n        this._emit('is-alive', origin);\n        this._emit(`is-alive-${origin}`, origin);\n      });\n\n      ipc.server.on('deauthorize', (req, socket) => {\n        const origin = socket.id;\n\n        this.connections.delete(origin);\n\n        for (const [, _socket] of this.connections.entries()) {\n          if (_socket === socket) {\n            this.log('found another connection', origin);\n            return;\n          }\n        }\n\n        socket.destroy();\n      });\n\n      if (this.opts.allowSlaveEmit !== false) {\n        ipc.server.on('slave-emit', (req, socket) => {\n          const origin = socket.id;\n          const data = req.data;\n\n          let v = 0;\n          const respond = res => {\n            if (v++) return;\n            this.emit(origin, 'master-received', {...data, _data: data.data, data: res});\n          };\n\n          let channel = data.channel;\n          if (channel === 'connect' || channel === 'disconnect') {\n            channel = `_${channel}`;\n          }\n\n          this._emit('slave-emit', origin, data, respond);\n          this._emit(`slave-emit-${channel}`, origin, data.data, respond);\n        });\n      }\n\n      ipc.server.on('*', (event, req) => {\n        if (event === 'authorize') {\n          return;\n        }\n\n        const origin = req.id;\n\n        if (this.connections.has(origin)) {\n          this._emit(event, origin, req.data);\n        }\n      });\n\n      ipc.server.on('socket.disconnected', socket => {\n        const origin = socket.id;\n\n        this.log('Disconnecting', origin, socket.__destroyed);\n\n        if (!socket.__destroyed) {\n          this.connections.delete(origin);\n        }\n\n        this._emit(`slave-emit-disconnect`, origin);\n        this._emit(`slave-emit-disconnect-${origin}`, origin);\n      });\n\n      if (this.opts.allowPeerBroadcast !== false) {\n        ipc.server.on('broadcast-peer', (req, socket) => {\n          const origin = socket.id;\n\n          req.data.from = origin;\n\n          this.broadcast('peer-message', req.data, origin);\n        });\n      }\n\n      if (this.opts.allowPeerEmit !== false) {\n        ipc.server.on('emit-peer', (req, socket) => {\n          const id = req.data.id;\n          const origin = socket.id;\n\n          this.once(`peer-got-${id}`, data => {\n            this.emit(origin, 'peer-received', {...req.data, _data: req.data.data, data: data.data});\n          });\n\n          const dest = req.data.dest;\n\n          req.data.from = req.data.dest;\n\n          delete req.data.dest;\n\n          this.emit(dest, 'peer-message', req.data);\n        });\n      }\n\n      if (this.opts.allowPeerEmit !== false) {\n        ipc.server.on('peer-got', req => {\n          this._emit(`peer-got-${req.data.id}`, req.data);\n        });\n      }\n\n      process.nextTick(cb);\n    });\n\n    ipc.server.start();\n  }\n\n  broadcast(channel, data, ...except) {\n    for (const origin of this.connections.keys()) {\n      if (except.indexOf(origin) > -1) {\n        continue;\n      }\n\n      this.emit(origin, channel, data);\n    }\n  }\n\n  emit(dest, channel, data) {\n    try {\n      if (this.connections.has(dest)) {\n        const socket = this.connections.get(dest);\n\n        try {\n          ipc.server.emit(socket, channel, {id: ipc.config.id, dest, data});\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport default NodeIPC;\n"]}