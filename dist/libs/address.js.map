{"version":3,"sources":["address.es6"],"names":[],"mappings":";;;;;;;;kBAKwB;;;;;;;;;;;;AAFxB,IAAI,oBAAJ;;AAEe,SAAS,OAAT,CAAiB,MAAjB,EAAyB;AACtC,MAAI,QAAJ,EAAc;AACZ,WAAO,QAAP,CADY;GAAd;;AAIA,aAAW,uBAAY,mBAAW;AAChC,QAAM,aAAa,OAAO,OAAP,EAAb,CAD0B;;AAGhC,gCAAa,UAAC,GAAD,EAAM,QAAN,EAAmB;AAC9B,UAAI,GAAJ,EAAS,MAAM,GAAN,CAAT;AACA,2BAAY,cAAY,oBAAU,UAAU,OAAV,GAAlC,EAF8B;KAAnB,CAAb,CAHgC;GAAX,CAAZ,CAOR,KAPQ,CAOF,eAAO;AACd,YAAQ,KAAR,CAAc,GAAd;;;AADc,WAId,CAAQ,IAAR,CAAa,CAAb,EAJc;GAAP,CAPT,CALsC;;AAmBtC,SAAO,QAAP,CAnBsC;CAAzB","file":"address.es6","sourcesContent":["import externalIP from 'external-ip';\nimport Promise from 'bluebird';\n\nlet _address;\n\nexport default function address(server) {\n  if (_address) {\n    return _address;\n  }\n\n  _address = new Promise(resolve => {\n    const defAddress = server.address();\n\n    externalIP()((err, hostname) => {\n      if (err) throw err;\n      resolve({...defAddress, hostname, protocol: 'https'});\n    });\n  }).catch(err => {\n    console.error(err);\n\n    // serious failure\n    process.exit(1);\n  });\n\n  return _address;\n}\n"]}